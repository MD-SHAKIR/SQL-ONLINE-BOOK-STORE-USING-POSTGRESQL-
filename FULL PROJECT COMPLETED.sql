--PROJECT--- ONLINEBOOKSTORE-----

--- CREATE DATABASE
DROP DATABASE ONLINEBOOKSTORE;
CREATE DATABASE ONLINEBOOKSTORE;

--SWITCH TO THE DATABASE
/c OnlineBookStore


-----CREATE TABLES------

--TABLE 1 - BOOKS
DROP TABLE IF EXISTS BOOKS;
CREATE TABLE BOOKS(
	Book_ID	SERIAL	PRIMARY KEY,
	Title VARCHAR(100),	
	Author VARCHAR(100),	
	Genre VARCHAR(50),	
	Published_Year INT,	
	Price NUMERIC(10,2),	
	Stock INT
	);

--TABLE 2 CUSTOMERS
DROP TABLE IF EXISTS CUSTOMERS;
CREATE TABLE CUSTOMERS(
	Customer_ID	SERIAL PRIMARY KEY,
	Name VARCHAR(100),	
	Email VARCHAR(100),	
	Phone VARCHAR(15),	
	City VARCHAR(100),	
	Country	VARCHAR(100)
	);

--TABLE 3 ORDERS
DROP TABLE IF EXISTS ORDERS;
CREATE TABLE ORDERS(
	Order_ID SERIAL	PRIMARY KEY,
	Customer_ID	INT	REFERENCES CUSTOMERS(CUSTOMER_ID),
	Book_ID	INT	REFERENCES BOOKS(BOOK_ID),
	Order_Date	DATE,	
	Quantity INT,	
	Total_Amount NUMERIC(10,2)	
    );

SELECT*FROM BOOKS;
SELECT*FROM CUSTOMERS;
SELECT* FROM ORDERS;

--IMPORT DATA INTO BOOKS TABLE
COPY BOOKS(BOOK_ID,TITLE,AUTHOR,GENRE,PUBLISHED_YEAR,PRICE,STOCK)
FROM 'C:\Users\91990\OneDrive\Documents\Downloads\Books.csv'
CSV HEADER;


--IMPORT DATA INTO CUSTOMERS TABLE
COPY CUSTOMERS(CUSTOMER_ID,NAME,EMAIL,PHONE,CITY,COUNTRY)
FROM 'C:\Users\91990\OneDrive\Documents\Downloads\Customers.csv'
CSV HEADER;

--IMPORT DATA INTO ORDERS TABLE
COPY ORDERS(ORDER_ID,CUSTOMER_ID,BOOK_ID,ORDER_DATE,QUANTITY,TOTAL_AMOUNT)
FROM 'C:\Users\91990\OneDrive\Documents\Downloads\Orders.csv'
CSV HEADER;


--1) RETRIEVE ALL BOOKS IN THE 'FICTION' GENRE:

SELECT * FROM BOOKS
WHERE GENRE='Fiction';


--2 ) FIND BOOK PUBLISHED AFTER THE YEAR 1950:

SELECT * FROM BOOKS
WHERE PUBLISHED_YEAR >1950;

--3) LIST ALL CUSTOMERS FROM THE CANADA:

SELECT * FROM CUSTOMERS
WHERE COUNTRY='Canada';


--4 ) SHOW ORDERS PLACED IN NOVEMBER 2023:
SELECT * FROM ORDERS
WHERE ORDER_DATE BETWEEN '2023-11-01' AND '2023-11-30';


--5) RETRIEVE THE TOTAL STOCK OF BOOK AVAILABLE:

SELECT SUM(stock) FROM BOOKS;

--6) FIND THE DETAILS OF THE MOST EXPENSIVE BOOK:

SELECT * FROM BOOKS ORDER BY PRICE DESC LIMIT 1;

--7) SHOW ALL CUSTOMERS WHO ORDERED MORE THAN 1 QUANTITY OF THE BOOK:

SELECT * FROM ORDERS
WHERE QUANTITY>1;


--8) RETRIEVE ALL ORDERS WHERE THE TOTAL AMOUNT EXCEEDS $20:

SELECT* FROM ORDERS
WHERE total_amount >20;

SELECT*FROM BOOKS;
SELECT*FROM CUSTOMERS;
SELECT* FROM ORDERS;

--9) LIST ALL GENRES AVAILABLE IN THE BOOKS TABLE:
SELECT DISTINCT genre FROM BOOKS;

--10) FIND THE BOOK WITH THE LOWEST STOCK:
SELECT * FROM BOOKS ORDER BY STOCK LIMIT 5 ;

--11) CALCULATE THE TOTAL REVENUE GENERATED FROM ALL ORDERS:
SELECT SUM(total_amount) AS TOTAL_REVENUE FROM ORDERS;


--12) RETRIVE THE TOTAL NUMBER OF BOOKS SOLD FOR EACH GENRE:

SELECT b.GENRE , SUM(o.QUANTITY) AS TOTAL_BOOKS_SOLD 
FROM ORDERS o
JOIN BOOKS b ON o.BOOK_ID=b.BOOK_ID
GROUP BY b.GENRE;
 
 --13) FIND THE AVERAGE  PRICE OF BOOKS IN THE "FANTASY" GENRE:
SELECT AVG(PRICE) AS AVERAGE_PRICE
FROM BOOKS
WHERE GENRE='Fantasy';

--14) LIST OF CUSTOMERS NAME WHO HAVE PLACED AT LEAST 2 ORDERS;
SELECT o.CUSTOMER_ID ,c.NAME ,COUNT(o.ORDER_ID) AS ORDER_COUNT
FROM ORDERS o
JOIN CUSTOMERS c
ON o.CUSTOMER_ID = c.CUSTOMER_ID
GROUP BY o.CUSTOMER_ID ,c.NAME
HAVING COUNT(ORDER_ID) >=2;

--15) FIND THE MOST FREQUENTLY ORDERED BOOK:


SELECT orders.book_id, books.title, COUNT(orders.order_id) AS order_count
FROM Orders 
JOIN Books ON orders.book_id = books.book_id
GROUP BY orders.book_id, books.title
ORDER BY order_count DESC
LIMIT 1;


SELECT b.book_id, b.title, COUNT(o.book_id) AS order_count
FROM Orders o
JOIN Books b ON o.book_id = b.book_id
GROUP BY b.book_id, b.title
ORDER BY order_count DESC
LIMIT 1;

--15) SHOW THE TOP 3 MOST EXPENSIVE BOOKS OF 'FANTASY' GENRE;
SELECT*FROM BOOKS;

SELECT * FROM BOOKS 
WHERE GENRE='Fantasy'
ORDER BY PRICE DESC LIMIT 3;

--16) RETRIEVE THE TOTAL QUANTITY OF BOOKS SOLD BY EACH AUTHOR:
SELECT b.AUTHOR , SUM(o.QUANTITY ) AS TOTAL_BOOKS_SOLD
FROM ORDERS o
JOIN BOOKS b ON o.BOOK_ID = b.BOOK_ID
GROUP BY b.AUTHOR; 

--17) LIST THE CITIES WHERE CUSTOMERS WHO SPENT OVER $30 ARE LOCATED:

SELECT DISTINCT c.CITY ,TOTAL_AMOUNT
FROM CUSTOMERS c
JOIN ORDERS o
ON c.CUSTOMER_ID=o.CUSTOMER_ID
WHERE TOTAL_AMOUNT >30 ;

--18) FIND THE CUSTOMER WHO SPENT THE MOST ON ORDERS:
SELECT c.CUSTOMER_ID ,c.NAME ,SUM(o.TOTAL_AMOUNT) AS TOTAL_SPENT
FROM CUSTOMERS c
JOIN ORDERS o
ON c.CUSTOMER_ID=o.CUSTOMER_ID
GROUP BY c.CUSTOMER_ID ,c.NAME
ORDER BY TOTAL_SPENT DESC LIMIT 1;

--19) CALCULATE THE STOCK REMAINING AFTER FULFULLING ALL ORDERS:

SELECT b.BOOK_ID ,b.TITLE,b.STOCK , COALESCE(SUM(o.QUANTITY),0) AS ORDER_QUANTITY,
		b.STOCK - COALESCE(SUM(o.QUANTITY),0) AS REMAINING_QUANTITY
FROM BOOKS b
LEFT JOIN ORDERS o 
ON b.BOOK_ID=o.BOOK_ID
GROUP BY b.BOOK_ID ;















